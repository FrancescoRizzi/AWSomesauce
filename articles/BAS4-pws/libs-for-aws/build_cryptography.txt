============================================================
Notes on building the cryptography library for usage on
AWS Platform (AWS Linux AMI)
============================================================

The pyJWT library:
https://github.com/jpadilla/pyjwt/
https://pyjwt.readthedocs.io/en/latest/

	If you are planning on encoding or decoding tokens using certain digital signature algorithms
	(like RSA or ECDSA), you will need to install the cryptography library.

		$ pip install cryptography

	-- https://pyjwt.readthedocs.io/en/latest/installation.html#cryptographic-dependencies-optional

Thus, we need to build and bundle the cryptography library:
https://github.com/pyca/cryptography
https://cryptography.io/en/latest/

See the specific information for Building the library for Linux:
https://cryptography.io/en/latest/installation/#building-cryptography-on-linux

Initial attempts failed, possibly because:

	you'll need to separately install cryptography's dependencies.
	You can see those dependencies by looking in setup.py

	-- https://mail.python.org/pipermail/cryptography-dev/2017-April/000749.html

============================================================

============================================================
Determining the dependencies for cryptography
============================================================
From the cryptography project:
	https://github.com/pyca/cryptography

The dev-requirements.txt file lists:

	clint
	coverage
	invoke
	requests
	tox >= 2.4.1
	twine
	-e .[test,docstest,pep8test]
	-e vectors

	-- https://github.com/pyca/cryptography/blob/master/dev-requirements.txt

Analyzing the setup.py file, we also consider these as dependencies:

	"idna>=2.1"
	"asn1crypto>=0.21.0"
	"packaging"
	"six>=1.4.1"
	"setuptools>=11.3"

	"enum34"
	"ipaddress"
	"cffi>=1.4.1"

	# Dev requirements of sort (eg: test_requirements)
	"pytest>=2.9.0"
	"pretend"
	"iso8601"
	"pytz"
	"hypothesis>=1.11.4"
	"cryptography_vectors==1.8"

	-- https://github.com/pyca/cryptography/blob/master/setup.py

NOTE: the lists above are not including the "cffi_modules" that are
conditionally referred to in setup.py:
	if all(argument_without_setup_requirements(argv, i)
		# ...
	else:
		cffi_modules = [
			"src/_cffi_src/build_openssl.py:ffi",
			"src/_cffi_src/build_constant_time.py:ffi",
			"src/_cffi_src/build_padding.py:ffi",
		]
		if cc_is_available():
			cffi_modules.append("src/_cffi_src/build_commoncrypto.py:ffi")

============================================================
Get an EC2 instance with AWS Linux:
============================================================
AWS Console > EC2 > Launch Instance

Step 1:
Select one of the AMIs with AWS Linux, and
for the appropriate region (eg: US East N. Virginia),
from this list:
	https://aws.amazon.com/amazon-linux-ami/
eg: HVM (SSD) EBS-Backed 64-bit (ami-0b33d91d)

Step 2:
Instance Type: t2.micro

Step 3:
Number of instances: 1
Purchasing option: Request spot instance: NO/Unchecked
Network: vpc-7fc6691b (default)
Subnet: No preference (default subnet in any Availability Zone)
Auto-assign Public IP: Use subnet setting (Enabled)
IAM Role: None
Suthdown behavior: Stop
Enable termination protection: Protect against accidental termination: NO/Unchecked
Monitoring: Enable CloudWatch detailed monitoring: NO/Unchecked
Tenancy: Shared - Run a shared hardware instance

Step 4: Add Storage
8 GiB General Purpose SSD (GP2)

Step 5: Add Tags
Project: SYNC-Service
Task: Build Native Libraries

Step 6: Configure Security Group
Either create a new security group or use an existing one.
Name and Description shouldn't matter (but make at least the name recognizable).
Rules:
Type	Protocol		Port Range	Source
SSH 	TCP 			22 			Anywhere 0.0.0.0 	::/0

Step 7: Review Instance Launch
Launch

Pop-up: Select an existing key pair or create a new key pair
Create a new key pair
Name: FRBuildCrypto2
Download Key Pair
Launch Instance

PEM file permissions need to be updated:
chmod 600 FRBuildCrypto2.pem

============================================================
Connecting to the instance
============================================================
AWS Console > EC2 > instances
Select the EC2 instance, and get (from its details) the IPv4 Public IP
(eg: 34.205.255.80)

From terminal:
ssh -i <path/to/yourkey.pem> ec2-user@<ip>
eg:
ssh -i ~/ESS/tools/sps/libs-for-aws/FRBuildCrypto2.pem ec2-user@34.205.255.80

sudo yum -y update
sudo yum -y upgrade

============================================================
Establish dev environment in the EC2 instance
============================================================

pwd
/home/ec2-user

sudo pip install --upgrade pip
Successfully uninstalled pip-6.1.1
Successfully installed pip-9.0.1

pip list
-bash: /usr/bin/pip: No such file or directory

http://stackoverflow.com/questions/34103119/upgrade-pip-in-amazon-linux/34584537
sudo cp /usr/local/bin/pip /usr/sbin/

virtualenv bc

NOTE:
	The site-packages for the virtual environment is then
		bc/lib/python2.7/site-packages/
	The activate script is in
		bc/bin

. bc/bin/activate
cd bc

pip install --upgrade pip

sudo yum install gcc libffi-devel python-devel openssl-devel

============================================================
Getting cryptography dependencies
============================================================

vim requirements.txt

idna>=2.1
asn1crypto>=0.21.0
packaging
six>=1.4.1
setuptools>=11.3
enum34
ipaddress
cffi>=1.4.1

sudo pip install -r requirements.txt

============================================================
Building cryptography
============================================================

pip install cryptography
Successfully installed cryptography-1.8.1

ls -l /lib/python2.7/site-packages
	does NOT list cryptography

pip list
	does list cryptography (1.8.1)

Where did this build and deploy to?

pip uninstall cryptography
Uninstalling cryptography-1.8.1:
  /home/ec2-user/bc/lib64/python2.7/site-packages/cryptography-1.8.1-py2.7.egg-info
  [...]
Proceed? (y/n)

Pick No, and then check via
ls -l /home/ec2-user/bc/lib64/python2.7/site-packages/

drwxrwxr-x 2 ec2-user ec2-user   4096 Apr  4 17:51 cffi
drwxrwxr-x 2 ec2-user ec2-user   4096 Apr  4 17:51 cffi-1.10.0.dist-info
-rwxrwxr-x 1 ec2-user ec2-user 746072 Apr  4 17:51 _cffi_backend.so
drwxrwxr-x 4 ec2-user ec2-user   4096 Apr  4 17:53 cryptography
drwxrwxr-x 2 ec2-user ec2-user   4096 Apr  4 17:53 cryptography-1.8.1-py2.7.egg-info

============================================================
Retrieving the resulting cryptography
============================================================

local terminal (not the ssh into EC2 instance from above)

mkdir grabbing

scp -i <path/to/yourkey.pem> -r ec2-user@<ip-address>:/home/ec2-user/bc/lib64/python2.7/site-packages/ .

eg:
scp -i ~/ESS/tools/sps/libs-for-aws/FRBuildCrypto2.pem -r ec2-user@34.205.255.80:/home/ec2-user/bc/lib64/python2.7/site-packages/ .

Results should now be on your local machine in /grabbing/site-packages






5. Include results in your bundle to be deployed

When adding the pre-built contents of this library to subversion, use
	svn add --force * --no-ignore --auto-props --parents --depth infinity
to avoid some of the files being filtered out by default global-ignores, svn:global-ignores, and svn:ignore settings/properties.


No module named cryptography.x509




